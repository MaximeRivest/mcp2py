---
title: "mcp2py - Full Examples & Testing"
format: html
jupyter: python3
---

# mcp2py: Turn any MCP server into a Python module

This notebook contains all the examples from the README to verify they work correctly.

## Installation

```bash
pip install mcp2py
```

## Basic Usage

### Simple Tool Calling

```{python}
from mcp2py import load

# Load an MCP server (filesystem example)
server = load("npx -y @modelcontextprotocol/server-filesystem /tmp")

# Call tools as methods
result = server.list_directory(path="/tmp")
print("Directory listing (first 200 chars):")
print(result[:200])

# Cleanup
server.close()
```

### Using Context Manager

```{python}
from mcp2py import load

# Automatic cleanup with context manager
with load("python tests/test_server.py") as server:
    result = server.echo(message="Hello from mcp2py!")
    print(result)
```

## Server Registry

Register commonly-used servers with friendly names:

```{python}
from mcp2py import register, load

# Register servers
register(
    test_mcp="python tests/test_server.py",
    filesystem="npx -y @modelcontextprotocol/server-filesystem /tmp"
)

# Use registered name instead of full command
server = load("test_mcp")
result = server.echo(message="Hello from mcp2py!")
```

## Roots Support

Tell the server which directories to focus on:

```{python}
from mcp2py import load

# Load with roots
server = load(
    "npx -y @modelcontextprotocol/server-filesystem /tmp",
    roots="/tmp"
)

print("âœ… Server loaded with roots support")
result = server.list_directory(path="/tmp")
print(f"Listed {len(result)} chars of directory content")
server.close()
```

## AI Framework Integration

### DSPy Integration

```{python}
from mcp2py import load
import dspy

server = load("python tests/test_server.py")

# Get tools as callables for DSPy
tools = server.tools

print(f"Number of tools: {len(tools)}")
print(f"Tool names: {[t.__name__ for t in tools]}")

# Each tool has proper signature
import inspect
for tool in tools:
    sig = inspect.signature(tool)
    print(f"  {tool.__name__}{sig}")

server.close()
```

### Example with DSPy

```{python}
from mcp2py import load
import dspy

dspy.configure(lm=dspy.LM("openai/gpt-4.1"))

# Load MCP server
browser = load("npx chrome-devtools-mcp@latest --headless")

# Pass tools directly to DSPy
browser_agent = dspy.ReAct("command -> results", tools=browser.tools)

res = browser_agent(
    command="Go on dspy.ai and tell me what is its loading speed and biggest asset"
)

res
```

## Resources

Access server resources as Python attributes:

```{python}
from mcp2py import load

server = load("python tests/test_server.py")

print(f"Resources available: {list(server._resources.keys())}")

# Access resources as attributes (snake_case conversion)
docs = server.API_Documentation
print(f"\nAPI Documentation (first 200 chars):")
print(docs[:200] + "...")

# Access version info
import json
version = json.loads(server.Version_Info)
print(f"\nVersion: {version['version']}")
print(f"Protocol: {version['protocol_version']}")

server.close()
```

## Prompts

Server prompts as template functions with proper signatures:

```{python}
from mcp2py import load
import inspect

server = load("python tests/test_server.py")

print(f"Prompts available: {list(server._prompts.keys())}")

# Prompts are callable with proper signatures
print("\nPrompt signatures:")
for name in server._prompts.keys():
    prompt_func = getattr(server, name)
    sig = inspect.signature(prompt_func)
    print(f"  {name}{sig}")

# Call a prompt
messages = server.review_code(
    code="def factorial(n):\n    return n * factorial(n-1)",
    focus="bugs"
)

print(f"\nCode review prompt generated:")
print(f"  Role: {messages[0]['role']}")
print(f"  Content length: {len(messages[0]['content']['text'])} chars")
print(f"  Preview: {messages[0]['content']['text'][:100]}...")

# Another prompt with required args
readme_messages = server.generate_readme(
    project_name="awesome-tool",
    description="A tool that does awesome things",
    features="Fast, Simple, Powerful"
)

print(f"\nREADME generation prompt:")
print(f"  Messages: {len(readme_messages)}")

# Prompt with no args
mcp_messages = server.explain_mcp()
print(f"\nMCP explanation prompt:")
print(f"  Messages: {len(mcp_messages)}")

server.close()
```

## Sampling & Elicitation

### Sampling (LLM calls when server requests)

```{python}
from mcp2py import load, DefaultSamplingHandler
# import os

# Enable sampling with custom handler
# os.environ["OPENAI_API_KEY"] = "your-key"
# handler = DefaultSamplingHandler(model="gpt-4o-mini")
# server = load("npx my-server", on_sampling=handler)

# Or disable sampling
# server = load("npx my-server", allow_sampling=False)

print("âœ… Sampling configuration examples shown")
```

### Elicitation (User input prompts)

```{python}
from mcp2py import load, DefaultElicitationHandler

# Custom elicitation with defaults
handler = DefaultElicitationHandler(defaults={"confirm": True})
# server = load("npx my-server", on_elicitation=handler)

# Or disable elicitation
# server = load("npx my-server", allow_elicitation=False)

print("âœ… Elicitation configuration examples shown")
```

## Exception Handling

```{python}
from mcp2py import (
    load,
    MCPError,
    MCPConnectionError,
    MCPToolError,
    MCPResourceError,
    MCPPromptError,
)

try:
    server = load("python tests/test_server.py")

    # This will fail - missing required argument
    try:
        # Assuming there was a tool that requires arguments
        result = server.echo(message="test")
        print(f"Success: {result}")
    except MCPToolError as e:
        print(f"Tool error: {e}")

    server.close()

except MCPConnectionError as e:
    print(f"Connection failed: {e}")
except MCPError as e:
    print(f"MCP error: {e}")
```

## Advanced Features

### Tool Inspection

```{python}
from mcp2py import load
import inspect

server = load("python tests/test_server.py")

# Inspect tool signatures
for tool in server.tools:
    print(f"\n{tool.__name__}:")
    print(f"  Signature: {inspect.signature(tool)}")
    print(f"  Doc: {tool.__doc__}")

    # Check parameters
    sig = inspect.signature(tool)
    for param_name, param in sig.parameters.items():
        default = f" = {param.default}" if param.default != inspect.Parameter.empty else ""
        print(f"    {param_name}: {param.annotation}{default}")

server.close()
```

### Registry Management

```{python}
from mcp2py import register, unregister, list_registered

# Register servers
register(
    test="python tests/test_server.py",
    fs="npx -y @modelcontextprotocol/server-filesystem /tmp"
)

# List all registered
servers = list_registered()
print("Registered servers:")
for name, command in servers.items():
    print(f"  {name}: {command}")

# Unregister
unregister("test")

# Check again
servers = list_registered()
print(f"\nAfter unregistering 'test': {list(servers.keys())}")
```

## Complete Example: Weather Analysis

```{python}
# Complete example (commented - requires API key)
# from mcp2py import load, register
# import dspy
#
# # Configure DSPy
# dspy.configure(lm=dspy.LM("openai/gpt-4o-mini"))
#
# # Register and load weather server
# register(weather="npx -y @h1deya/mcp-server-weather")
# weather = load("weather")
#
# # Create analysis agent
# class WeatherAnalysis(dspy.Signature):
#     """Analyze weather data for a location."""
#     query = dspy.InputField()
#     result = dspy.OutputField()
#
# agent = dspy.ReAct(WeatherAnalysis, tools=weather.tools)
#
# # Analyze weather
# result = agent(query="What's the weather like in San Francisco and should I bring an umbrella?")
# print(result.result)
#
# weather.close()

print("âœ… Complete weather example (commented - requires API)")
```

## Test Server Verification

Let's verify all basic functionality with the test server:

```{python}
from mcp2py import load

# Load test server
server = load("python tests/test_server.py")

print("âœ… Server loaded successfully")
print(f"  Tools: {list(server._tools.keys())}")
print(f"  Resources: {list(server._resources.keys())}")
print(f"  Prompts: {list(server._prompts.keys())}")

# Test echo tool
result = server.echo(message="Testing mcp2py!")
print(f"\nâœ… Echo test: {result}")

# Test add tool
result = server.add(a=5, b=3)
print(f"âœ… Add test: {result}")

# Test tools property
tools = server.tools
print(f"\nâœ… Tools property: {len(tools)} tools")
for tool in tools:
    print(f"  - {tool.__name__}")

server.close()
print("\nâœ… All basic tests passed!")
```

## Summary

This notebook demonstrates:

- âœ… Basic tool calling
- âœ… Context manager usage
- âœ… Server registry
- âœ… Roots support
- âœ… Tool inspection with proper signatures
- âœ… AI framework integration (DSPy)
- âœ… Resources and prompts support
- âœ… Sampling and elicitation configuration
- âœ… Exception handling
- âœ… Registry management

All core functionality is working correctly! ðŸŽ‰
