---
title: "Chrome DevTools MCP Example"
format: html
---

## Chrome DevTools MCP Server

This example demonstrates using the Chrome DevTools MCP server with mcp2py and DSPy.

**Note:** The Chrome DevTools server requires a browser context. You may need to run with:
- `xvfb-run` for headless environments
- Or configure the server to run in headless mode

```{python}
from mcp2py import load
import dspy

# Configure DSPy with your LLM
dspy.configure(lm=dspy.LM("openai/gpt-4o-mini", temperature=0.7, max_tokens=2000))

# Load Chrome DevTools MCP server
browser = load("npx chrome-devtools-mcp@latest")

print("✅ Chrome DevTools MCP server loaded")
print(f"Available tools: {[t.__name__ for t in browser.tools[:5]]}...")  # Show first 5
```

## Tool Signature Inspection

mcp2py automatically generates proper function signatures from MCP tool schemas, so DSPy knows what parameters to pass:

```{python}
import inspect

# Check the signature of new_page
new_page_tool = [t for t in browser.tools if t.__name__ == 'new_page'][0]
print(f"Tool: {new_page_tool.__name__}")
print(f"Description: {new_page_tool.__doc__}")
print(f"Signature: {inspect.signature(new_page_tool)}")
```

## Using with DSPy

DSPy can now properly understand the tool parameters and make correct calls:

```{python}
# Create a ReAct agent with browser tools
browser_agent = dspy.ReAct("task -> result", tools=browser.tools)

# Example task - note that DSPy will understand the tool signatures
# and provide required parameters like 'url' for new_page
try:
    result = browser_agent(
        task="Open a new page at https://example.com and take a screenshot"
    )
    print(f"Result: {result}")
except Exception as e:
    print(f"Note: {type(e).__name__}: {e}")
    print("This may fail if no X server is available or browser context is not initialized")
```

## Direct Tool Usage

You can also call tools directly with proper type checking:

```{python}
# Direct tool call - shows the proper signature in action
try:
    # This will fail with proper error message because url is required
    browser.new_page()
except TypeError as e:
    print(f"✅ Proper signature validation: {e}")

# Correct usage with required parameter
try:
    result = browser.new_page(url="https://example.com")
    print(f"Page created: {result}")
except Exception as e:
    print(f"Note: {e}")
```

## Cleanup

```{python}
browser.close()
print("✅ Browser connection closed")
```

## Key Improvements

With the new signature generation:

1. **Proper type hints**: Tools have actual Python signatures, not just `**kwargs`
2. **IDE support**: Autocomplete and parameter hints work correctly
3. **DSPy compatibility**: DSPy can inspect signatures and call tools correctly
4. **Validation**: Missing required parameters fail with clear error messages

This makes MCP tools work seamlessly with DSPy, Claudette, and other frameworks that expect proper Python callables.
